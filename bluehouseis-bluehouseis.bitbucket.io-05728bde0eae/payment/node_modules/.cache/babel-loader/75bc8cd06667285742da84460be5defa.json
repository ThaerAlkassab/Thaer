{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sandra\\\\Desktop\\\\bluehouse\\\\src\\\\components\\\\Home\\\\Rooms\\\\Rooms\\\\Rooms.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Rooms.css\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport RoomCard from \"../RoomCard/RoomCard\";\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Rooms = _ref => {\n  _s();\n\n  let {\n    checkIn,\n    checkOut,\n    dayDifference,\n    clicked\n  } = _ref;\n  const [rooms, setRooms] = useState([]);\n  const [roomsIDs, setRoomsIDs] = useState([]);\n  const [priceFinal, setPriceFinal] = useState([]);\n  const [pictures, setPictures] = useState([]);\n  const [availabilities, setAvailabilities] = useState(\"\");\n  const [roomsInfo, setRoomsInfo] = useState({});\n  const [info, setInfo] = useState({});\n  const [icons, setIcons] = useState({});\n  const [newRooms, setNewRooms] = useState([]);\n  useEffect(() => {\n    fetch(\"AvailableRooms.json\").then(res => res.json()).then(data => setRoomsInfo(data.rooms)).catch(error => {\n      console.log(error);\n    });\n  }, [clicked]);\n  useEffect(() => {\n    axios.post('/json/getProperties', {\n      \"authentication\": {\n        \"apiKey\": \"Pricegenietesthfggi9zilgiugkjgkhg9h464654\"\n      }\n    }).then(response => {\n      setRooms(response.data.getProperties[0].roomTypes);\n    }).catch(error => {\n      console.log(error);\n    });\n    let infoList = []; //info_list\n\n    let iconsList = []; //icons_list\n\n    for (let i = 0; i < roomsInfo.length; i++) {\n      let list1 = roomsInfo[i].info_list;\n      let list2 = roomsInfo[i].icons_list;\n      infoList.push(list1);\n      iconsList.push(list2);\n    }\n\n    setInfo(infoList);\n    setIcons(iconsList);\n  }, [clicked, roomsInfo]);\n  useEffect(() => {\n    let Ids = [];\n\n    for (let i = 0; i < rooms.length; i++) {\n      let roomsId = rooms[i].roomId;\n      Ids.push(roomsId);\n    }\n\n    setRoomsIDs(Ids);\n  }, [rooms]);\n  useEffect(() => {\n    axios.post('/json/getDescriptions', {\n      \"propId\": \"76255\",\n      \"roomId\": true\n    }).then(response => {\n      let pics = [];\n\n      for (let i = 0; i < roomsIDs.length; i++) {\n        let pic = response.data.properties.rooms[roomsIDs[i]].pictures[0];\n        pics.push(pic.url);\n      }\n\n      setPictures(pics);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [clicked, roomsIDs]);\n  useEffect(() => {\n    axios.post('/json/getAvailabilities', {\n      \"checkIn\": `${checkIn}`,\n      \"checkOut\": `${checkOut}`,\n      \"propId\": \"76255\",\n      \"numAdult\": \"1\",\n      //guests\n      \"ignoreAvail\": true,\n      \"roomIds\": roomsIDs\n    }).then(response => {\n      for (let i = 0; i <= roomsIDs.length; i++) {\n        let price = response.data[roomsIDs[i]].price;\n        let newPrice = Math.round(price * 100) / 100;\n        setPriceFinal(prevArray => [...prevArray, newPrice]);\n        let avail = response.data[roomsIDs[i]].roomsavail;\n        setAvailabilities(prevArray => [...prevArray, avail]);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [checkIn, checkOut, clicked, roomsIDs]);\n  useEffect(() => {\n    for (var i = 0, len = rooms.length; i < len; i++) {\n      rooms[i].price = priceFinal[i];\n    }\n\n    for (let k = 0; k < rooms.length; k++) {\n      rooms[k].picture = pictures[k];\n    }\n\n    for (let k = 0; k < rooms.length; k++) {\n      rooms[k].avail = availabilities[k];\n    }\n\n    for (let k = 0; k < rooms.length; k++) {\n      rooms[k].info = info[k];\n    }\n\n    for (let k = 0; k < rooms.length; k++) {\n      rooms[k].icons = icons[k];\n    }\n  }, [rooms, priceFinal, pictures, info, clicked, availabilities, icons, checkIn, checkOut]);\n  useEffect(() => {\n    let slicedRooms = rooms.slice(0, size);\n    setNewRooms(slicedRooms);\n  }, [rooms, checkIn, checkOut, newRooms.length]);\n  const size = 7;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: newRooms.length > 6 && newRooms.map((room, index) => /*#__PURE__*/_jsxDEV(RoomCard, {\n      room: room,\n      price: room.price,\n      picture: room.picture,\n      dayDifference: dayDifference,\n      avail: room.avail,\n      names: roomsInfo[0].name,\n      info: info[index],\n      icons: icons[index],\n      roomNum: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n\n_s(Rooms, \"NOnDYBYrEHZQ5a1Q8mP/40giF2c=\");\n\n_c = Rooms;\n\nconst mapStateToProps = state => ({\n  checkIn: state.checkIn.firstDay,\n  clicked: state.clicked.clicked,\n  dayDifference: state.dayDifference.dayDifference,\n  checkOut: state.checkOut.secondDay\n});\n\nexport default connect(mapStateToProps)(Rooms);\n\nvar _c;\n\n$RefreshReg$(_c, \"Rooms\");","map":{"version":3,"sources":["C:/Users/Sandra/Desktop/bluehouse/src/components/Home/Rooms/Rooms/Rooms.js"],"names":["React","useState","useEffect","axios","RoomCard","connect","Rooms","checkIn","checkOut","dayDifference","clicked","rooms","setRooms","roomsIDs","setRoomsIDs","priceFinal","setPriceFinal","pictures","setPictures","availabilities","setAvailabilities","roomsInfo","setRoomsInfo","info","setInfo","icons","setIcons","newRooms","setNewRooms","fetch","then","res","json","data","catch","error","console","log","post","response","getProperties","roomTypes","infoList","iconsList","i","length","list1","info_list","list2","icons_list","push","Ids","roomsId","roomId","pics","pic","properties","url","price","newPrice","Math","round","prevArray","avail","roomsavail","len","k","picture","slicedRooms","slice","size","map","room","index","name","mapStateToProps","state","firstDay","secondDay"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Rooms.css\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport RoomCard from \"../RoomCard/RoomCard\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst Rooms = ({checkIn,checkOut,dayDifference,clicked}) => {\r\n    const [rooms, setRooms] = useState([])\r\n    const [roomsIDs, setRoomsIDs] = useState([])\r\n    const [priceFinal, setPriceFinal]  = useState([]); \r\n    const [pictures, setPictures]  = useState([]); \r\n    const [availabilities, setAvailabilities] = useState(\"\");\r\n    const [roomsInfo, setRoomsInfo] = useState({});\r\n    const [info, setInfo] = useState({});\r\n    const [icons, setIcons] = useState({});\r\n    const [newRooms, setNewRooms] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(\"AvailableRooms.json\")\r\n        .then(res => res.json())\r\n        .then(data => setRoomsInfo(data.rooms))\r\n        .catch((error) => {\r\n        console.log(error); });\r\n    }, [clicked])\r\n    useEffect(() => {\r\n        axios.post('/json/getProperties', {\r\n            \"authentication\": {\r\n                \"apiKey\": \"Pricegenietesthfggi9zilgiugkjgkhg9h464654\"\r\n            }\r\n        }).then((response) => {\r\n            setRooms(response.data.getProperties[0].roomTypes)\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n        let infoList = [] //info_list\r\n        let iconsList = [] //icons_list\r\n        for(let i=0; i<roomsInfo.length; i++){\r\n            let list1 = roomsInfo[i].info_list\r\n            let list2 = roomsInfo[i].icons_list\r\n            infoList.push(list1)\r\n            iconsList.push(list2)\r\n        }\r\n        setInfo(infoList)\r\n        setIcons(iconsList)\r\n    }, [clicked,roomsInfo])\r\n    useEffect(() => {\r\n        let Ids=[]\r\n        for (let i=0; i<rooms.length; i++) \r\n            {\r\n            let roomsId = rooms[i].roomId\r\n            Ids.push(roomsId)\r\n            }\r\n        setRoomsIDs(Ids)\r\n    }, [rooms])\r\n    useEffect(() => {\r\n        axios.post('/json/getDescriptions', {\r\n                \"propId\": \"76255\",\r\n                \"roomId\": true\r\n            }\r\n        ).then((response) => {\r\n            let pics = []\r\n            for(let i = 0 ; i <roomsIDs.length; i++){\r\n                let pic = response.data.properties.rooms[roomsIDs[i]].pictures[0]\r\n                pics.push(pic.url)\r\n            }\r\n            setPictures(pics)\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }, [clicked,roomsIDs])\r\n    useEffect(() => {\r\n       \r\n        axios.post('/json/getAvailabilities', {\r\n            \"checkIn\": `${checkIn}`,\r\n            \"checkOut\": `${checkOut}`,\r\n            \"propId\": \"76255\",\r\n            \"numAdult\": \"1\", //guests\r\n            \"ignoreAvail\": true,\r\n            \"roomIds\": roomsIDs\r\n        }).then(response => {\r\n        for (let i=0; i<= roomsIDs.length; i++){\r\n            let price = response.data[roomsIDs[i]].price \r\n            let newPrice = Math.round(price * 100) / 100 \r\n            setPriceFinal(prevArray => [...prevArray, newPrice])\r\n            let avail = response.data[roomsIDs[i]].roomsavail \r\n            setAvailabilities(prevArray => [...prevArray, avail])\r\n        }\r\n        }).catch((error) => {\r\n            console.log(error);\r\n            });\r\n    }, [ checkIn, checkOut, clicked,roomsIDs,])\r\n    \r\n    useEffect(() => {\r\n        for(var i=0,len=rooms.length;i<len;i++){\r\n            rooms[i].price = priceFinal[i];\r\n        }\r\n        for (let k=0 ; k< rooms.length; k++){\r\n            rooms[k].picture = pictures[k]      \r\n        }\r\n        for (let k=0 ; k< rooms.length; k++){\r\n            rooms[k].avail = availabilities[k]  \r\n        }\r\n        for (let k=0 ; k< rooms.length; k++){\r\n            rooms[k].info = info[k]  \r\n        }\r\n        for (let k=0 ; k< rooms.length; k++){\r\n            rooms[k].icons = icons[k]  \r\n        }\r\n    }, [ rooms, priceFinal, pictures,info, clicked,availabilities, icons, checkIn, checkOut]) \r\n    useEffect(() => {\r\n        let slicedRooms = rooms.slice(0, size)\r\n        setNewRooms(slicedRooms)\r\n    }, [ rooms, checkIn, checkOut,newRooms.length ]) \r\n  \r\n\r\n    const size = 7\r\n    \r\n    return (\r\n        <>\r\n            { newRooms.length>6 && newRooms.map( (room, index) =>\r\n                <RoomCard \r\n                    room={room} \r\n                    price={room.price} \r\n                    picture = {room.picture}\r\n                    key={index}\r\n                    dayDifference={dayDifference}\r\n                    avail={room.avail}\r\n                    names={roomsInfo[0].name}\r\n                    info={info[index]}\r\n                    icons={icons[index]}\r\n                    roomNum={index}\r\n                /> ) \r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    checkIn: state.checkIn.firstDay,\r\n    clicked: state.clicked.clicked,\r\n    dayDifference: state.dayDifference.dayDifference,\r\n    checkOut: state.checkOut.secondDay\r\n  });\r\n  \r\nexport default connect( mapStateToProps)(Rooms);"]},"metadata":{},"sourceType":"module"}