{"ast":null,"code":"(function (global, factory) {\n  typeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory() : typeof define === \"function\" && define.amd ? define(factory) : global.translate = factory();\n})(this, function () {\n  \"use strict\";\n\n  var iso = [\"aa\", \"ab\", \"ae\", \"af\", \"ak\", \"am\", \"an\", \"ar\", \"as\", \"av\", \"ay\", \"az\", \"ba\", \"be\", \"bg\", \"bh\", \"bi\", \"bm\", \"bn\", \"bo\", \"br\", \"bs\", \"ca\", \"ce\", \"ch\", \"co\", \"cr\", \"cs\", \"cu\", \"cv\", \"cy\", \"da\", \"de\", \"dv\", \"dz\", \"ee\", \"el\", \"en\", \"eo\", \"es\", \"et\", \"eu\", \"fa\", \"ff\", \"fi\", \"fj\", \"fo\", \"fr\", \"fy\", \"ga\", \"gd\", \"gl\", \"gn\", \"gu\", \"gv\", \"ha\", \"he\", \"hi\", \"ho\", \"hr\", \"ht\", \"hu\", \"hy\", \"hz\", \"ia\", \"id\", \"ie\", \"ig\", \"ii\", \"ik\", \"io\", \"is\", \"it\", \"iu\", \"ja\", \"jv\", \"ka\", \"kg\", \"ki\", \"kj\", \"kk\", \"kl\", \"km\", \"kn\", \"ko\", \"kr\", \"ks\", \"ku\", \"kv\", \"kw\", \"ky\", \"la\", \"lb\", \"lg\", \"li\", \"ln\", \"lo\", \"lt\", \"lu\", \"lv\", \"mg\", \"mh\", \"mi\", \"mk\", \"ml\", \"mn\", \"mr\", \"ms\", \"mt\", \"my\", \"na\", \"nb\", \"nd\", \"ne\", \"ng\", \"nl\", \"nn\", \"no\", \"nr\", \"nv\", \"ny\", \"oc\", \"oj\", \"om\", \"or\", \"os\", \"pa\", \"pi\", \"pl\", \"ps\", \"pt\", \"qu\", \"rm\", \"rn\", \"ro\", \"ru\", \"rw\", \"sa\", \"sc\", \"sd\", \"se\", \"sg\", \"si\", \"sk\", \"sl\", \"sm\", \"sn\", \"so\", \"sq\", \"sr\", \"ss\", \"st\", \"su\", \"sv\", \"sw\", \"ta\", \"te\", \"tg\", \"th\", \"ti\", \"tk\", \"tl\", \"tn\", \"to\", \"tr\", \"ts\", \"tt\", \"tw\", \"ty\", \"ug\", \"uk\", \"ur\", \"uz\", \"ve\", \"vi\", \"vo\", \"wa\", \"wo\", \"xh\", \"yi\", \"yo\", \"za\", \"zh\", \"zu\"];\n  var iso2 = {\n    aar: \"aa\",\n    abk: \"ab\",\n    afr: \"af\",\n    aka: \"ak\",\n    alb: \"sq\",\n    amh: \"am\",\n    ara: \"ar\",\n    arg: \"an\",\n    arm: \"hy\",\n    asm: \"as\",\n    ava: \"av\",\n    ave: \"ae\",\n    aym: \"ay\",\n    aze: \"az\",\n    bak: \"ba\",\n    bam: \"bm\",\n    baq: \"eu\",\n    bel: \"be\",\n    ben: \"bn\",\n    bih: \"bh\",\n    bis: \"bi\",\n    bos: \"bs\",\n    bre: \"br\",\n    bul: \"bg\",\n    bur: \"my\",\n    cat: \"ca\",\n    cha: \"ch\",\n    che: \"ce\",\n    chi: \"zh\",\n    chu: \"cu\",\n    chv: \"cv\",\n    cor: \"kw\",\n    cos: \"co\",\n    cre: \"cr\",\n    cze: \"cs\",\n    dan: \"da\",\n    div: \"dv\",\n    dut: \"nl\",\n    dzo: \"dz\",\n    eng: \"en\",\n    epo: \"eo\",\n    est: \"et\",\n    ewe: \"ee\",\n    fao: \"fo\",\n    fij: \"fj\",\n    fin: \"fi\",\n    fre: \"fr\",\n    fry: \"fy\",\n    ful: \"ff\",\n    geo: \"ka\",\n    ger: \"de\",\n    gla: \"gd\",\n    gle: \"ga\",\n    glg: \"gl\",\n    glv: \"gv\",\n    gre: \"el\",\n    grn: \"gn\",\n    guj: \"gu\",\n    hat: \"ht\",\n    hau: \"ha\",\n    heb: \"he\",\n    her: \"hz\",\n    hin: \"hi\",\n    hmo: \"ho\",\n    hrv: \"hr\",\n    hun: \"hu\",\n    ibo: \"ig\",\n    ice: \"is\",\n    ido: \"io\",\n    iii: \"ii\",\n    iku: \"iu\",\n    ile: \"ie\",\n    ina: \"ia\",\n    ind: \"id\",\n    ipk: \"ik\",\n    ita: \"it\",\n    jav: \"jv\",\n    jpn: \"ja\",\n    kal: \"kl\",\n    kan: \"kn\",\n    kas: \"ks\",\n    kau: \"kr\",\n    kaz: \"kk\",\n    khm: \"km\",\n    kik: \"ki\",\n    kin: \"rw\",\n    kir: \"ky\",\n    kom: \"kv\",\n    kon: \"kg\",\n    kor: \"ko\",\n    kua: \"kj\",\n    kur: \"ku\",\n    lao: \"lo\",\n    lat: \"la\",\n    lav: \"lv\",\n    lim: \"li\",\n    lin: \"ln\",\n    lit: \"lt\",\n    ltz: \"lb\",\n    lub: \"lu\",\n    lug: \"lg\",\n    mac: \"mk\",\n    mah: \"mh\",\n    mal: \"ml\",\n    mao: \"mi\",\n    mar: \"mr\",\n    may: \"ms\",\n    mlg: \"mg\",\n    mlt: \"mt\",\n    mon: \"mn\",\n    nau: \"na\",\n    nav: \"nv\",\n    nbl: \"nr\",\n    nde: \"nd\",\n    ndo: \"ng\",\n    nep: \"ne\",\n    nno: \"nn\",\n    nob: \"nb\",\n    nor: \"no\",\n    nya: \"ny\",\n    oci: \"oc\",\n    oji: \"oj\",\n    ori: \"or\",\n    orm: \"om\",\n    oss: \"os\",\n    pan: \"pa\",\n    per: \"fa\",\n    pli: \"pi\",\n    pol: \"pl\",\n    por: \"pt\",\n    pus: \"ps\",\n    que: \"qu\",\n    roh: \"rm\",\n    rum: \"ro\",\n    run: \"rn\",\n    rus: \"ru\",\n    sag: \"sg\",\n    san: \"sa\",\n    sin: \"si\",\n    slo: \"sk\",\n    slv: \"sl\",\n    sme: \"se\",\n    smo: \"sm\",\n    sna: \"sn\",\n    snd: \"sd\",\n    som: \"so\",\n    sot: \"st\",\n    spa: \"es\",\n    srd: \"sc\",\n    srp: \"sr\",\n    ssw: \"ss\",\n    sun: \"su\",\n    swa: \"sw\",\n    swe: \"sv\",\n    tah: \"ty\",\n    tam: \"ta\",\n    tat: \"tt\",\n    tel: \"te\",\n    tgk: \"tg\",\n    tgl: \"tl\",\n    tha: \"th\",\n    tib: \"bo\",\n    tir: \"ti\",\n    ton: \"to\",\n    tsn: \"tn\",\n    tso: \"ts\",\n    tuk: \"tk\",\n    tur: \"tr\",\n    twi: \"tw\",\n    uig: \"ug\",\n    ukr: \"uk\",\n    urd: \"ur\",\n    uzb: \"uz\",\n    ven: \"ve\",\n    vie: \"vi\",\n    vol: \"vo\",\n    wel: \"cy\",\n    wln: \"wa\",\n    wol: \"wo\",\n    xho: \"xh\",\n    yid: \"yi\",\n    yor: \"yo\",\n    zha: \"za\",\n    zul: \"zu\"\n  };\n  var map = {\n    afar: \"aa\",\n    abkhazian: \"ab\",\n    afrikaans: \"af\",\n    akan: \"ak\",\n    albanian: \"sq\",\n    amharic: \"am\",\n    arabic: \"ar\",\n    aragonese: \"an\",\n    armenian: \"hy\",\n    assamese: \"as\",\n    avaric: \"av\",\n    avestan: \"ae\",\n    aymara: \"ay\",\n    azerbaijani: \"az\",\n    bashkir: \"ba\",\n    bambara: \"bm\",\n    basque: \"eu\",\n    belarusian: \"be\",\n    bengali: \"bn\",\n    \"bihari languages\": \"bh\",\n    bislama: \"bi\",\n    tibetan: \"bo\",\n    bosnian: \"bs\",\n    breton: \"br\",\n    bulgarian: \"bg\",\n    burmese: \"my\",\n    catalan: \"ca\",\n    valencian: \"ca\",\n    czech: \"cs\",\n    chamorro: \"ch\",\n    chechen: \"ce\",\n    chinese: \"zh\",\n    \"church slavic\": \"cu\",\n    \"old slavonic\": \"cu\",\n    \"church slavonic\": \"cu\",\n    \"old bulgarian\": \"cu\",\n    \"old church slavonic\": \"cu\",\n    chuvash: \"cv\",\n    cornish: \"kw\",\n    corsican: \"co\",\n    cree: \"cr\",\n    welsh: \"cy\",\n    danish: \"da\",\n    german: \"de\",\n    divehi: \"dv\",\n    dhivehi: \"dv\",\n    maldivian: \"dv\",\n    dutch: \"nl\",\n    flemish: \"nl\",\n    dzongkha: \"dz\",\n    greek: \"el\",\n    english: \"en\",\n    esperanto: \"eo\",\n    estonian: \"et\",\n    ewe: \"ee\",\n    faroese: \"fo\",\n    persian: \"fa\",\n    fijian: \"fj\",\n    finnish: \"fi\",\n    french: \"fr\",\n    \"western frisian\": \"fy\",\n    fulah: \"ff\",\n    georgian: \"ka\",\n    gaelic: \"gd\",\n    \"scottish gaelic\": \"gd\",\n    irish: \"ga\",\n    galician: \"gl\",\n    manx: \"gv\",\n    guarani: \"gn\",\n    gujarati: \"gu\",\n    haitian: \"ht\",\n    \"haitian creole\": \"ht\",\n    hausa: \"ha\",\n    hebrew: \"he\",\n    herero: \"hz\",\n    hindi: \"hi\",\n    \"hiri motu\": \"ho\",\n    croatian: \"hr\",\n    hungarian: \"hu\",\n    igbo: \"ig\",\n    icelandic: \"is\",\n    ido: \"io\",\n    \"sichuan yi\": \"ii\",\n    nuosu: \"ii\",\n    inuktitut: \"iu\",\n    interlingue: \"ie\",\n    occidental: \"ie\",\n    interlingua: \"ia\",\n    indonesian: \"id\",\n    inupiaq: \"ik\",\n    italian: \"it\",\n    javanese: \"jv\",\n    japanese: \"ja\",\n    kalaallisut: \"kl\",\n    greenlandic: \"kl\",\n    kannada: \"kn\",\n    kashmiri: \"ks\",\n    kanuri: \"kr\",\n    kazakh: \"kk\",\n    \"central khmer\": \"km\",\n    kikuyu: \"ki\",\n    gikuyu: \"ki\",\n    kinyarwanda: \"rw\",\n    kirghiz: \"ky\",\n    kyrgyz: \"ky\",\n    komi: \"kv\",\n    kongo: \"kg\",\n    korean: \"ko\",\n    kuanyama: \"kj\",\n    kwanyama: \"kj\",\n    kurdish: \"ku\",\n    lao: \"lo\",\n    latin: \"la\",\n    latvian: \"lv\",\n    limburgan: \"li\",\n    limburger: \"li\",\n    limburgish: \"li\",\n    lingala: \"ln\",\n    lithuanian: \"lt\",\n    luxembourgish: \"lb\",\n    letzeburgesch: \"lb\",\n    \"luba-katanga\": \"lu\",\n    ganda: \"lg\",\n    macedonian: \"mk\",\n    marshallese: \"mh\",\n    malayalam: \"ml\",\n    maori: \"mi\",\n    marathi: \"mr\",\n    malay: \"ms\",\n    malagasy: \"mg\",\n    maltese: \"mt\",\n    mongolian: \"mn\",\n    nauru: \"na\",\n    navajo: \"nv\",\n    navaho: \"nv\",\n    \"ndebele, south\": \"nr\",\n    \"south ndebele\": \"nr\",\n    \"ndebele, north\": \"nd\",\n    \"north ndebele\": \"nd\",\n    ndonga: \"ng\",\n    nepali: \"ne\",\n    \"norwegian nynorsk\": \"nn\",\n    \"nynorsk, norwegian\": \"nn\",\n    \"norwegian bokmål\": \"nb\",\n    \"bokmål, norwegian\": \"nb\",\n    norwegian: \"no\",\n    chichewa: \"ny\",\n    chewa: \"ny\",\n    nyanja: \"ny\",\n    occitan: \"oc\",\n    ojibwa: \"oj\",\n    oriya: \"or\",\n    oromo: \"om\",\n    ossetian: \"os\",\n    ossetic: \"os\",\n    panjabi: \"pa\",\n    punjabi: \"pa\",\n    pali: \"pi\",\n    polish: \"pl\",\n    portuguese: \"pt\",\n    pushto: \"ps\",\n    pashto: \"ps\",\n    quechua: \"qu\",\n    romansh: \"rm\",\n    romanian: \"ro\",\n    moldavian: \"ro\",\n    moldovan: \"ro\",\n    rundi: \"rn\",\n    russian: \"ru\",\n    sango: \"sg\",\n    sanskrit: \"sa\",\n    sinhala: \"si\",\n    sinhalese: \"si\",\n    slovak: \"sk\",\n    slovenian: \"sl\",\n    \"northern sami\": \"se\",\n    samoan: \"sm\",\n    shona: \"sn\",\n    sindhi: \"sd\",\n    somali: \"so\",\n    \"sotho, southern\": \"st\",\n    spanish: \"es\",\n    castilian: \"es\",\n    sardinian: \"sc\",\n    serbian: \"sr\",\n    swati: \"ss\",\n    sundanese: \"su\",\n    swahili: \"sw\",\n    swedish: \"sv\",\n    tahitian: \"ty\",\n    tamil: \"ta\",\n    tatar: \"tt\",\n    telugu: \"te\",\n    tajik: \"tg\",\n    tagalog: \"tl\",\n    thai: \"th\",\n    tigrinya: \"ti\",\n    tonga: \"to\",\n    tswana: \"tn\",\n    tsonga: \"ts\",\n    turkmen: \"tk\",\n    turkish: \"tr\",\n    twi: \"tw\",\n    uighur: \"ug\",\n    uyghur: \"ug\",\n    ukrainian: \"uk\",\n    urdu: \"ur\",\n    uzbek: \"uz\",\n    venda: \"ve\",\n    vietnamese: \"vi\",\n    \"volapük\": \"vo\",\n    walloon: \"wa\",\n    wolof: \"wo\",\n    xhosa: \"xh\",\n    yiddish: \"yi\",\n    yoruba: \"yo\",\n    zhuang: \"za\",\n    chuang: \"za\",\n    zulu: \"zu\"\n  };\n\n  var languages = name => {\n    if (typeof name !== \"string\") {\n      throw new Error(`The \"language\" must be a string, received ${typeof name}`);\n    }\n\n    if (name.length > 100) {\n      throw new Error(`The \"language\" is too long at ${name.length} characters`);\n    }\n\n    name = name.toLowerCase();\n    name = map[name] || iso2[name] || name;\n\n    if (!iso.includes(name)) {\n      throw new Error(`The language \"${name}\" is not part of the ISO 639-1`);\n    }\n\n    return name;\n  };\n\n  function Cache() {\n    var _cache = Object.create(null);\n\n    this.put = function (key, value, time, timeoutCallback) {\n      if (typeof time !== \"undefined\" && (typeof time !== \"number\" || isNaN(time) || time <= 0)) {\n        throw new Error(\"Cache timeout must be a positive number\");\n      } else if (typeof timeoutCallback !== \"undefined\" && typeof timeoutCallback !== \"function\") {\n        throw new Error(\"Cache timeout callback must be a function\");\n      }\n\n      var oldRecord = _cache[key];\n\n      if (oldRecord) {\n        clearTimeout(oldRecord.timeout);\n      } else {}\n\n      var record = {\n        value: value,\n        expire: time + Date.now()\n      };\n\n      if (!isNaN(record.expire)) {\n        record.timeout = setTimeout(function () {\n          _del(key);\n\n          if (timeoutCallback) {\n            timeoutCallback(key, value);\n          }\n        }.bind(this), time);\n      }\n\n      _cache[key] = record;\n      return value;\n    };\n\n    this.del = function (key) {\n      var canDelete = true;\n      var oldRecord = _cache[key];\n\n      if (oldRecord) {\n        clearTimeout(oldRecord.timeout);\n\n        if (!isNaN(oldRecord.expire) && oldRecord.expire < Date.now()) {\n          canDelete = false;\n        }\n      } else {\n        canDelete = false;\n      }\n\n      if (canDelete) {\n        _del(key);\n      }\n\n      return canDelete;\n    };\n\n    function _del(key) {\n      delete _cache[key];\n    }\n\n    this.clear = function () {\n      for (var key in _cache) {\n        clearTimeout(_cache[key].timeout);\n      }\n\n      _cache = Object.create(null);\n    };\n\n    this.get = function (key) {\n      var data = _cache[key];\n\n      if (typeof data != \"undefined\") {\n        if (isNaN(data.expire) || data.expire >= Date.now()) {\n          return data.value;\n        } else {\n          delete _cache[key];\n        }\n      }\n\n      return null;\n    };\n  }\n\n  const exp$2 = new Cache();\n  exp$2.Cache = Cache;\n  const base = \"https://translate.googleapis.com/translate_a/single\";\n  var google = {\n    fetch: _ref => {\n      let {\n        key: key,\n        from: from,\n        to: to,\n        text: text\n      } = _ref;\n      return [`${base}?client=gtx&sl=${from}&tl=${to}&dt=t&q=${encodeURI(text)}`];\n    },\n    parse: res => res.json().then(body => {\n      body = body && body[0] && body[0][0] && body[0].map(s => s[0]).join(\"\");\n      if (!body) throw new Error(\"Translation not found\");\n      return body;\n    })\n  };\n  var yandex = {\n    needkey: true,\n    fetch: _ref2 => {\n      let {\n        key: key,\n        from: from,\n        to: to,\n        text: text\n      } = _ref2;\n      return [`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${key}&lang=${from}-${to}&text=${encodeURIComponent(text)}`, {\n        method: \"POST\",\n        body: \"\"\n      }];\n    },\n    parse: res => res.json().then(body => {\n      if (body.code !== 200) {\n        throw new Error(body.message);\n      }\n\n      return body.text[0];\n    })\n  };\n  const libreUrl = \"https://libretranslate.com/translate\";\n  var libre = {\n    needkey: false,\n    fetch: _ref3 => {\n      let {\n        url = libreUrl,\n        key: key,\n        from: from,\n        to: to,\n        text: text\n      } = _ref3;\n      const body = JSON.stringify({\n        q: text,\n        source: from,\n        target: to,\n        api_key: key\n      });\n      const headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      return [url, {\n        method: \"POST\",\n        body: body,\n        headers: headers\n      }];\n    },\n    parse: res => res.json().then(body => {\n      if (!body) {\n        throw new Error(\"No response found\");\n      }\n\n      if (body.error) {\n        throw new Error(body.error);\n      }\n\n      if (!body.translatedText) {\n        throw new Error(\"No response found\");\n      }\n\n      return body.translatedText;\n    })\n  };\n  var deepl = {\n    needkey: true,\n    fetch: _ref4 => {\n      let {\n        key: key,\n        from: from,\n        to: to,\n        text: text\n      } = _ref4;\n      const suffix = /:fx$/.test(key) ? \"-free\" : \"\";\n      text = encodeURIComponent(text);\n      return [`https://api${suffix}.deepl.com/v2/translate?auth_key=${key}&source_lang=${from}&target_lang=${to}&text=${text}`, {\n        method: \"POST\",\n        body: \"\"\n      }];\n    },\n    parse: async res => {\n      if (!res.ok) {\n        if (res.status === 403) {\n          throw new Error(\"Auth Error, please review the key for DeepL\");\n        }\n\n        throw new Error(`Error ${res.status}`);\n      }\n\n      return res.json().then(body => body.translations[0].text);\n    }\n  };\n  var engines = {\n    google: google,\n    yandex: yandex,\n    libre: libre,\n    deepl: deepl\n  };\n\n  if (typeof fetch === \"undefined\") {\n    try {\n      global.fetch = require(\"node-fetch\");\n    } catch (error) {\n      console.warn(\"Please make sure node-fetch is available\");\n    }\n  }\n\n  const Translate = function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!(this instanceof Translate)) {\n      return new Translate(options);\n    }\n\n    const defaults = {\n      from: \"en\",\n      to: \"en\",\n      cache: undefined,\n      languages: languages,\n      engines: engines,\n      engine: \"google\",\n      keys: {}\n    };\n\n    const translate = async function (text) {\n      let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof opts === \"string\") opts = {\n        to: opts\n      };\n      opts.text = text;\n      opts.from = languages(opts.from || translate.from);\n      opts.to = languages(opts.to || translate.to);\n      opts.cache = opts.cache || translate.cache;\n      opts.engines = opts.engines || {};\n      opts.engine = opts.engine || translate.engine;\n      opts.url = opts.url || translate.url;\n      opts.id = opts.id || `${opts.url}:${opts.from}:${opts.to}:${opts.engine}:${opts.text}`;\n      opts.keys = opts.keys || translate.keys || {};\n\n      for (let name in translate.keys) {\n        opts.keys[name] = opts.keys[name] || translate.keys[name];\n      }\n\n      opts.key = opts.key || translate.key || opts.keys[opts.engine];\n      const engine = opts.engines[opts.engine] || translate.engines[opts.engine];\n      const cached = exp$2.get(opts.id);\n      if (cached) return Promise.resolve(cached);\n\n      if (opts.to === opts.from) {\n        return Promise.resolve(opts.text);\n      }\n\n      if (engine.needkey && !opts.key) {\n        throw new Error(`The engine \"${opts.engine}\" needs a key, please provide it`);\n      }\n\n      const fetchOpts = engine.fetch(opts);\n      return fetch(...fetchOpts).then(engine.parse).then(translated => exp$2.put(opts.id, translated, opts.cache));\n    };\n\n    for (let key in defaults) {\n      translate[key] = typeof options[key] === \"undefined\" ? defaults[key] : options[key];\n    }\n\n    return translate;\n  };\n\n  const exp = new Translate();\n  exp.Translate = Translate;\n  return exp;\n});","map":{"version":3,"sources":["C:/Users/Sandra/Desktop/bluehouse/node_modules/translate/translate.min.js"],"names":["global","factory","exports","module","define","amd","translate","iso","iso2","aar","abk","afr","aka","alb","amh","ara","arg","arm","asm","ava","ave","aym","aze","bak","bam","baq","bel","ben","bih","bis","bos","bre","bul","bur","cat","cha","che","chi","chu","chv","cor","cos","cre","cze","dan","div","dut","dzo","eng","epo","est","ewe","fao","fij","fin","fre","fry","ful","geo","ger","gla","gle","glg","glv","gre","grn","guj","hat","hau","heb","her","hin","hmo","hrv","hun","ibo","ice","ido","iii","iku","ile","ina","ind","ipk","ita","jav","jpn","kal","kan","kas","kau","kaz","khm","kik","kin","kir","kom","kon","kor","kua","kur","lao","lat","lav","lim","lin","lit","ltz","lub","lug","mac","mah","mal","mao","mar","may","mlg","mlt","mon","nau","nav","nbl","nde","ndo","nep","nno","nob","nor","nya","oci","oji","ori","orm","oss","pan","per","pli","pol","por","pus","que","roh","rum","run","rus","sag","san","sin","slo","slv","sme","smo","sna","snd","som","sot","spa","srd","srp","ssw","sun","swa","swe","tah","tam","tat","tel","tgk","tgl","tha","tib","tir","ton","tsn","tso","tuk","tur","twi","uig","ukr","urd","uzb","ven","vie","vol","wel","wln","wol","xho","yid","yor","zha","zul","map","afar","abkhazian","afrikaans","akan","albanian","amharic","arabic","aragonese","armenian","assamese","avaric","avestan","aymara","azerbaijani","bashkir","bambara","basque","belarusian","bengali","bislama","tibetan","bosnian","breton","bulgarian","burmese","catalan","valencian","czech","chamorro","chechen","chinese","chuvash","cornish","corsican","cree","welsh","danish","german","divehi","dhivehi","maldivian","dutch","flemish","dzongkha","greek","english","esperanto","estonian","faroese","persian","fijian","finnish","french","fulah","georgian","gaelic","irish","galician","manx","guarani","gujarati","haitian","hausa","hebrew","herero","hindi","croatian","hungarian","igbo","icelandic","nuosu","inuktitut","interlingue","occidental","interlingua","indonesian","inupiaq","italian","javanese","japanese","kalaallisut","greenlandic","kannada","kashmiri","kanuri","kazakh","kikuyu","gikuyu","kinyarwanda","kirghiz","kyrgyz","komi","kongo","korean","kuanyama","kwanyama","kurdish","latin","latvian","limburgan","limburger","limburgish","lingala","lithuanian","luxembourgish","letzeburgesch","ganda","macedonian","marshallese","malayalam","maori","marathi","malay","malagasy","maltese","mongolian","nauru","navajo","navaho","ndonga","nepali","norwegian","chichewa","chewa","nyanja","occitan","ojibwa","oriya","oromo","ossetian","ossetic","panjabi","punjabi","pali","polish","portuguese","pushto","pashto","quechua","romansh","romanian","moldavian","moldovan","rundi","russian","sango","sanskrit","sinhala","sinhalese","slovak","slovenian","samoan","shona","sindhi","somali","spanish","castilian","sardinian","serbian","swati","sundanese","swahili","swedish","tahitian","tamil","tatar","telugu","tajik","tagalog","thai","tigrinya","tonga","tswana","tsonga","turkmen","turkish","uighur","uyghur","ukrainian","urdu","uzbek","venda","vietnamese","walloon","wolof","xhosa","yiddish","yoruba","zhuang","chuang","zulu","languages","name","Error","length","toLowerCase","includes","Cache","_cache","Object","create","put","key","value","time","timeoutCallback","isNaN","oldRecord","clearTimeout","timeout","record","expire","Date","now","setTimeout","_del","bind","del","canDelete","clear","get","data","exp$2","base","google","fetch","from","to","text","encodeURI","parse","res","json","then","body","s","join","yandex","needkey","encodeURIComponent","method","code","message","libreUrl","libre","url","JSON","stringify","q","source","target","api_key","headers","error","translatedText","deepl","suffix","test","ok","status","translations","engines","require","console","warn","Translate","options","defaults","cache","undefined","engine","keys","opts","id","cached","Promise","resolve","fetchOpts","translated","exp"],"mappings":"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","sourcesContent":["(function(global,factory){typeof exports===\"object\"&&typeof module!==\"undefined\"?module.exports=factory():typeof define===\"function\"&&define.amd?define(factory):global.translate=factory()})(this,function(){\"use strict\";var iso=[\"aa\",\"ab\",\"ae\",\"af\",\"ak\",\"am\",\"an\",\"ar\",\"as\",\"av\",\"ay\",\"az\",\"ba\",\"be\",\"bg\",\"bh\",\"bi\",\"bm\",\"bn\",\"bo\",\"br\",\"bs\",\"ca\",\"ce\",\"ch\",\"co\",\"cr\",\"cs\",\"cu\",\"cv\",\"cy\",\"da\",\"de\",\"dv\",\"dz\",\"ee\",\"el\",\"en\",\"eo\",\"es\",\"et\",\"eu\",\"fa\",\"ff\",\"fi\",\"fj\",\"fo\",\"fr\",\"fy\",\"ga\",\"gd\",\"gl\",\"gn\",\"gu\",\"gv\",\"ha\",\"he\",\"hi\",\"ho\",\"hr\",\"ht\",\"hu\",\"hy\",\"hz\",\"ia\",\"id\",\"ie\",\"ig\",\"ii\",\"ik\",\"io\",\"is\",\"it\",\"iu\",\"ja\",\"jv\",\"ka\",\"kg\",\"ki\",\"kj\",\"kk\",\"kl\",\"km\",\"kn\",\"ko\",\"kr\",\"ks\",\"ku\",\"kv\",\"kw\",\"ky\",\"la\",\"lb\",\"lg\",\"li\",\"ln\",\"lo\",\"lt\",\"lu\",\"lv\",\"mg\",\"mh\",\"mi\",\"mk\",\"ml\",\"mn\",\"mr\",\"ms\",\"mt\",\"my\",\"na\",\"nb\",\"nd\",\"ne\",\"ng\",\"nl\",\"nn\",\"no\",\"nr\",\"nv\",\"ny\",\"oc\",\"oj\",\"om\",\"or\",\"os\",\"pa\",\"pi\",\"pl\",\"ps\",\"pt\",\"qu\",\"rm\",\"rn\",\"ro\",\"ru\",\"rw\",\"sa\",\"sc\",\"sd\",\"se\",\"sg\",\"si\",\"sk\",\"sl\",\"sm\",\"sn\",\"so\",\"sq\",\"sr\",\"ss\",\"st\",\"su\",\"sv\",\"sw\",\"ta\",\"te\",\"tg\",\"th\",\"ti\",\"tk\",\"tl\",\"tn\",\"to\",\"tr\",\"ts\",\"tt\",\"tw\",\"ty\",\"ug\",\"uk\",\"ur\",\"uz\",\"ve\",\"vi\",\"vo\",\"wa\",\"wo\",\"xh\",\"yi\",\"yo\",\"za\",\"zh\",\"zu\"];var iso2={aar:\"aa\",abk:\"ab\",afr:\"af\",aka:\"ak\",alb:\"sq\",amh:\"am\",ara:\"ar\",arg:\"an\",arm:\"hy\",asm:\"as\",ava:\"av\",ave:\"ae\",aym:\"ay\",aze:\"az\",bak:\"ba\",bam:\"bm\",baq:\"eu\",bel:\"be\",ben:\"bn\",bih:\"bh\",bis:\"bi\",bos:\"bs\",bre:\"br\",bul:\"bg\",bur:\"my\",cat:\"ca\",cha:\"ch\",che:\"ce\",chi:\"zh\",chu:\"cu\",chv:\"cv\",cor:\"kw\",cos:\"co\",cre:\"cr\",cze:\"cs\",dan:\"da\",div:\"dv\",dut:\"nl\",dzo:\"dz\",eng:\"en\",epo:\"eo\",est:\"et\",ewe:\"ee\",fao:\"fo\",fij:\"fj\",fin:\"fi\",fre:\"fr\",fry:\"fy\",ful:\"ff\",geo:\"ka\",ger:\"de\",gla:\"gd\",gle:\"ga\",glg:\"gl\",glv:\"gv\",gre:\"el\",grn:\"gn\",guj:\"gu\",hat:\"ht\",hau:\"ha\",heb:\"he\",her:\"hz\",hin:\"hi\",hmo:\"ho\",hrv:\"hr\",hun:\"hu\",ibo:\"ig\",ice:\"is\",ido:\"io\",iii:\"ii\",iku:\"iu\",ile:\"ie\",ina:\"ia\",ind:\"id\",ipk:\"ik\",ita:\"it\",jav:\"jv\",jpn:\"ja\",kal:\"kl\",kan:\"kn\",kas:\"ks\",kau:\"kr\",kaz:\"kk\",khm:\"km\",kik:\"ki\",kin:\"rw\",kir:\"ky\",kom:\"kv\",kon:\"kg\",kor:\"ko\",kua:\"kj\",kur:\"ku\",lao:\"lo\",lat:\"la\",lav:\"lv\",lim:\"li\",lin:\"ln\",lit:\"lt\",ltz:\"lb\",lub:\"lu\",lug:\"lg\",mac:\"mk\",mah:\"mh\",mal:\"ml\",mao:\"mi\",mar:\"mr\",may:\"ms\",mlg:\"mg\",mlt:\"mt\",mon:\"mn\",nau:\"na\",nav:\"nv\",nbl:\"nr\",nde:\"nd\",ndo:\"ng\",nep:\"ne\",nno:\"nn\",nob:\"nb\",nor:\"no\",nya:\"ny\",oci:\"oc\",oji:\"oj\",ori:\"or\",orm:\"om\",oss:\"os\",pan:\"pa\",per:\"fa\",pli:\"pi\",pol:\"pl\",por:\"pt\",pus:\"ps\",que:\"qu\",roh:\"rm\",rum:\"ro\",run:\"rn\",rus:\"ru\",sag:\"sg\",san:\"sa\",sin:\"si\",slo:\"sk\",slv:\"sl\",sme:\"se\",smo:\"sm\",sna:\"sn\",snd:\"sd\",som:\"so\",sot:\"st\",spa:\"es\",srd:\"sc\",srp:\"sr\",ssw:\"ss\",sun:\"su\",swa:\"sw\",swe:\"sv\",tah:\"ty\",tam:\"ta\",tat:\"tt\",tel:\"te\",tgk:\"tg\",tgl:\"tl\",tha:\"th\",tib:\"bo\",tir:\"ti\",ton:\"to\",tsn:\"tn\",tso:\"ts\",tuk:\"tk\",tur:\"tr\",twi:\"tw\",uig:\"ug\",ukr:\"uk\",urd:\"ur\",uzb:\"uz\",ven:\"ve\",vie:\"vi\",vol:\"vo\",wel:\"cy\",wln:\"wa\",wol:\"wo\",xho:\"xh\",yid:\"yi\",yor:\"yo\",zha:\"za\",zul:\"zu\"};var map={afar:\"aa\",abkhazian:\"ab\",afrikaans:\"af\",akan:\"ak\",albanian:\"sq\",amharic:\"am\",arabic:\"ar\",aragonese:\"an\",armenian:\"hy\",assamese:\"as\",avaric:\"av\",avestan:\"ae\",aymara:\"ay\",azerbaijani:\"az\",bashkir:\"ba\",bambara:\"bm\",basque:\"eu\",belarusian:\"be\",bengali:\"bn\",\"bihari languages\":\"bh\",bislama:\"bi\",tibetan:\"bo\",bosnian:\"bs\",breton:\"br\",bulgarian:\"bg\",burmese:\"my\",catalan:\"ca\",valencian:\"ca\",czech:\"cs\",chamorro:\"ch\",chechen:\"ce\",chinese:\"zh\",\"church slavic\":\"cu\",\"old slavonic\":\"cu\",\"church slavonic\":\"cu\",\"old bulgarian\":\"cu\",\"old church slavonic\":\"cu\",chuvash:\"cv\",cornish:\"kw\",corsican:\"co\",cree:\"cr\",welsh:\"cy\",danish:\"da\",german:\"de\",divehi:\"dv\",dhivehi:\"dv\",maldivian:\"dv\",dutch:\"nl\",flemish:\"nl\",dzongkha:\"dz\",greek:\"el\",english:\"en\",esperanto:\"eo\",estonian:\"et\",ewe:\"ee\",faroese:\"fo\",persian:\"fa\",fijian:\"fj\",finnish:\"fi\",french:\"fr\",\"western frisian\":\"fy\",fulah:\"ff\",georgian:\"ka\",gaelic:\"gd\",\"scottish gaelic\":\"gd\",irish:\"ga\",galician:\"gl\",manx:\"gv\",guarani:\"gn\",gujarati:\"gu\",haitian:\"ht\",\"haitian creole\":\"ht\",hausa:\"ha\",hebrew:\"he\",herero:\"hz\",hindi:\"hi\",\"hiri motu\":\"ho\",croatian:\"hr\",hungarian:\"hu\",igbo:\"ig\",icelandic:\"is\",ido:\"io\",\"sichuan yi\":\"ii\",nuosu:\"ii\",inuktitut:\"iu\",interlingue:\"ie\",occidental:\"ie\",interlingua:\"ia\",indonesian:\"id\",inupiaq:\"ik\",italian:\"it\",javanese:\"jv\",japanese:\"ja\",kalaallisut:\"kl\",greenlandic:\"kl\",kannada:\"kn\",kashmiri:\"ks\",kanuri:\"kr\",kazakh:\"kk\",\"central khmer\":\"km\",kikuyu:\"ki\",gikuyu:\"ki\",kinyarwanda:\"rw\",kirghiz:\"ky\",kyrgyz:\"ky\",komi:\"kv\",kongo:\"kg\",korean:\"ko\",kuanyama:\"kj\",kwanyama:\"kj\",kurdish:\"ku\",lao:\"lo\",latin:\"la\",latvian:\"lv\",limburgan:\"li\",limburger:\"li\",limburgish:\"li\",lingala:\"ln\",lithuanian:\"lt\",luxembourgish:\"lb\",letzeburgesch:\"lb\",\"luba-katanga\":\"lu\",ganda:\"lg\",macedonian:\"mk\",marshallese:\"mh\",malayalam:\"ml\",maori:\"mi\",marathi:\"mr\",malay:\"ms\",malagasy:\"mg\",maltese:\"mt\",mongolian:\"mn\",nauru:\"na\",navajo:\"nv\",navaho:\"nv\",\"ndebele, south\":\"nr\",\"south ndebele\":\"nr\",\"ndebele, north\":\"nd\",\"north ndebele\":\"nd\",ndonga:\"ng\",nepali:\"ne\",\"norwegian nynorsk\":\"nn\",\"nynorsk, norwegian\":\"nn\",\"norwegian bokmål\":\"nb\",\"bokmål, norwegian\":\"nb\",norwegian:\"no\",chichewa:\"ny\",chewa:\"ny\",nyanja:\"ny\",occitan:\"oc\",ojibwa:\"oj\",oriya:\"or\",oromo:\"om\",ossetian:\"os\",ossetic:\"os\",panjabi:\"pa\",punjabi:\"pa\",pali:\"pi\",polish:\"pl\",portuguese:\"pt\",pushto:\"ps\",pashto:\"ps\",quechua:\"qu\",romansh:\"rm\",romanian:\"ro\",moldavian:\"ro\",moldovan:\"ro\",rundi:\"rn\",russian:\"ru\",sango:\"sg\",sanskrit:\"sa\",sinhala:\"si\",sinhalese:\"si\",slovak:\"sk\",slovenian:\"sl\",\"northern sami\":\"se\",samoan:\"sm\",shona:\"sn\",sindhi:\"sd\",somali:\"so\",\"sotho, southern\":\"st\",spanish:\"es\",castilian:\"es\",sardinian:\"sc\",serbian:\"sr\",swati:\"ss\",sundanese:\"su\",swahili:\"sw\",swedish:\"sv\",tahitian:\"ty\",tamil:\"ta\",tatar:\"tt\",telugu:\"te\",tajik:\"tg\",tagalog:\"tl\",thai:\"th\",tigrinya:\"ti\",tonga:\"to\",tswana:\"tn\",tsonga:\"ts\",turkmen:\"tk\",turkish:\"tr\",twi:\"tw\",uighur:\"ug\",uyghur:\"ug\",ukrainian:\"uk\",urdu:\"ur\",uzbek:\"uz\",venda:\"ve\",vietnamese:\"vi\",\"volapük\":\"vo\",walloon:\"wa\",wolof:\"wo\",xhosa:\"xh\",yiddish:\"yi\",yoruba:\"yo\",zhuang:\"za\",chuang:\"za\",zulu:\"zu\"};var languages=name=>{if(typeof name!==\"string\"){throw new Error(`The \"language\" must be a string, received ${typeof name}`)}if(name.length>100){throw new Error(`The \"language\" is too long at ${name.length} characters`)}name=name.toLowerCase();name=map[name]||iso2[name]||name;if(!iso.includes(name)){throw new Error(`The language \"${name}\" is not part of the ISO 639-1`)}return name};function Cache(){var _cache=Object.create(null);this.put=function(key,value,time,timeoutCallback){if(typeof time!==\"undefined\"&&(typeof time!==\"number\"||isNaN(time)||time<=0)){throw new Error(\"Cache timeout must be a positive number\")}else if(typeof timeoutCallback!==\"undefined\"&&typeof timeoutCallback!==\"function\"){throw new Error(\"Cache timeout callback must be a function\")}var oldRecord=_cache[key];if(oldRecord){clearTimeout(oldRecord.timeout)}else{}var record={value:value,expire:time+Date.now()};if(!isNaN(record.expire)){record.timeout=setTimeout(function(){_del(key);if(timeoutCallback){timeoutCallback(key,value)}}.bind(this),time)}_cache[key]=record;return value};this.del=function(key){var canDelete=true;var oldRecord=_cache[key];if(oldRecord){clearTimeout(oldRecord.timeout);if(!isNaN(oldRecord.expire)&&oldRecord.expire<Date.now()){canDelete=false}}else{canDelete=false}if(canDelete){_del(key)}return canDelete};function _del(key){delete _cache[key]}this.clear=function(){for(var key in _cache){clearTimeout(_cache[key].timeout)}_cache=Object.create(null)};this.get=function(key){var data=_cache[key];if(typeof data!=\"undefined\"){if(isNaN(data.expire)||data.expire>=Date.now()){return data.value}else{delete _cache[key]}}return null}}const exp$2=new Cache;exp$2.Cache=Cache;const base=\"https://translate.googleapis.com/translate_a/single\";var google={fetch:({key:key,from:from,to:to,text:text})=>[`${base}?client=gtx&sl=${from}&tl=${to}&dt=t&q=${encodeURI(text)}`],parse:res=>res.json().then(body=>{body=body&&body[0]&&body[0][0]&&body[0].map(s=>s[0]).join(\"\");if(!body)throw new Error(\"Translation not found\");return body})};var yandex={needkey:true,fetch:({key:key,from:from,to:to,text:text})=>[`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${key}&lang=${from}-${to}&text=${encodeURIComponent(text)}`,{method:\"POST\",body:\"\"}],parse:res=>res.json().then(body=>{if(body.code!==200){throw new Error(body.message)}return body.text[0]})};const libreUrl=\"https://libretranslate.com/translate\";var libre={needkey:false,fetch:({url:url=libreUrl,key:key,from:from,to:to,text:text})=>{const body=JSON.stringify({q:text,source:from,target:to,api_key:key});const headers={\"Content-Type\":\"application/json\"};return[url,{method:\"POST\",body:body,headers:headers}]},parse:res=>res.json().then(body=>{if(!body){throw new Error(\"No response found\")}if(body.error){throw new Error(body.error)}if(!body.translatedText){throw new Error(\"No response found\")}return body.translatedText})};var deepl={needkey:true,fetch:({key:key,from:from,to:to,text:text})=>{const suffix=/:fx$/.test(key)?\"-free\":\"\";text=encodeURIComponent(text);return[`https://api${suffix}.deepl.com/v2/translate?auth_key=${key}&source_lang=${from}&target_lang=${to}&text=${text}`,{method:\"POST\",body:\"\"}]},parse:async res=>{if(!res.ok){if(res.status===403){throw new Error(\"Auth Error, please review the key for DeepL\")}throw new Error(`Error ${res.status}`)}return res.json().then(body=>body.translations[0].text)}};var engines={google:google,yandex:yandex,libre:libre,deepl:deepl};if(typeof fetch===\"undefined\"){try{global.fetch=require(\"node-fetch\")}catch(error){console.warn(\"Please make sure node-fetch is available\")}}const Translate=function(options={}){if(!(this instanceof Translate)){return new Translate(options)}const defaults={from:\"en\",to:\"en\",cache:undefined,languages:languages,engines:engines,engine:\"google\",keys:{}};const translate=async(text,opts={})=>{if(typeof opts===\"string\")opts={to:opts};opts.text=text;opts.from=languages(opts.from||translate.from);opts.to=languages(opts.to||translate.to);opts.cache=opts.cache||translate.cache;opts.engines=opts.engines||{};opts.engine=opts.engine||translate.engine;opts.url=opts.url||translate.url;opts.id=opts.id||`${opts.url}:${opts.from}:${opts.to}:${opts.engine}:${opts.text}`;opts.keys=opts.keys||translate.keys||{};for(let name in translate.keys){opts.keys[name]=opts.keys[name]||translate.keys[name]}opts.key=opts.key||translate.key||opts.keys[opts.engine];const engine=opts.engines[opts.engine]||translate.engines[opts.engine];const cached=exp$2.get(opts.id);if(cached)return Promise.resolve(cached);if(opts.to===opts.from){return Promise.resolve(opts.text)}if(engine.needkey&&!opts.key){throw new Error(`The engine \"${opts.engine}\" needs a key, please provide it`)}const fetchOpts=engine.fetch(opts);return fetch(...fetchOpts).then(engine.parse).then(translated=>exp$2.put(opts.id,translated,opts.cache))};for(let key in defaults){translate[key]=typeof options[key]===\"undefined\"?defaults[key]:options[key]}return translate};const exp=new Translate;exp.Translate=Translate;return exp});"]},"metadata":{},"sourceType":"script"}